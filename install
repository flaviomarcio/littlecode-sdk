#!/bin/bash

. bash-lib.sh

function main()
{
  clear
  local __repo_ssh=$(git config --list | grep remote.origin.url | awk -F= '{print $2}')
  local __repo_name=$(basename ${__repo_ssh} | sed 's/\.git//g')

  local __temp_dir="/tmp/littlecode.${RANDOM}"
  local __temp_dir_repo="${__temp_dir}/${__repo_name}"
  mkdir -p ${__temp_dir}
  cd ${__temp_dir}

  echM "Installing ${__repo_ssh}"
  echC "  repository....: ${COLOR_YELLOW}${__repo_ssh}"
  echC "  repository-dir: ${COLOR_YELLOW}${__temp_dir_repo}"
  echC "  commands.....:"
  echY "    git clone ${__repo_ssh} ${__repo_name} --quiet"

  git clone ${__repo_ssh} ${__repo_name} --quiet

  if ! [[ -d ${__temp_dir_repo} ]]; then
    return 0;
  fi
  cd ${__temp_dir_repo}
  echC "  Building branchs.......:"
  local __repo_branchs=($(git branch --remotes | sed '/HEAD/d' | sed '/master/d' | sed '/main/d' | sed 's/origin\///g' | grep release))
  for __repo_branch in "${__repo_branchs[@]}"
  do
    echY "    Branch: ${__repo_branch}"
    cd ${__temp_dir}
    local __temp_dir_branch="${__temp_dir}/$(echo ${__repo_branch} | sed 's/\//-/g')"
    echY "      commands:"
    echY "        - cp -rf ${__temp_dir_repo} ${__temp_dir_branch}"
    echY "        - cd ${__temp_dir_branch}"
    echY "        - git checkout ${__repo_branch} --quiet"
    echY "        - ./mvn clean install"

    cp -rf ${__temp_dir_repo} ${__temp_dir_branch}
    if ! [[ -d ${__temp_dir_branch} ]]; then
      continue
    fi
    cd ${__temp_dir_branch}
    git checkout ${__repo_branch} --quiet
    export __local_build=$(./mvn clean install)
  done

  rm -rf ${__temp_dir}

}

clear
main
